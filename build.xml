<!--
		 General purpose build script for web applications and web services,
		 including enhanced support for deploying directly to a Tomcat 5
		 based server.

		 This build script assumes that the source code of your web application
		 is organized into the following subdirectories underneath the source
		 code directory from which you execute the build script:

				docs								 Static documentation files to be copied to
														 the "docs" subdirectory of your distribution.

				src									Java source code (and associated resource files)
														 to be compiled to the "WEB-INF/classes"
														 subdirectory of your web applicaiton.

				web									Static HTML, JSP, and other content (such as
														 image files), including the WEB-INF subdirectory
														 and its configuration file contents.

		 $Id: build.xml.txt,v 1.6 2004/05/23 19:50:44 markt Exp $
-->


<!-- A "project" describes a set of targets that may be requested
		 when Ant is executed.	The "default" attribute defines the
		 target which is executed if no specific target is requested,
		 and the "basedir" attribute defines the current working directory
		 from which Ant executes the requested task.	This is normally
		 set to the current working directory.
-->

<project name="Myna" default="compile" basedir=".">



<!-- ==================== Property Definitions ============================= -->


	<!--
	
		Each of the following properties are used in the build script.
		Values for these properties are set by the first place they are
		defined, from the following list:
	
		* Definitions on the "ant" command line (ant -Dfoo=bar compile).
	
		* Definitions from a "build.properties" file in the top level
		 source directory of this application.
	
		* Definitions from a "build.properties" file in the developer's
		 home directory.
	
		* Default definitions in this build.xml file.
	
		You will note below that property values can be composed based on the
		contents of previously defined properties.	This is a powerful technique
		that helps you minimize the number of changes required when your development
		environment is modified.	Note that property composition is allowed within
		"build.properties" files as well as in the "build.xml" script.
	
	-->

	<property file="build.properties"/>


<!-- ==================== File and Directory Names ========================= -->


	<!--
	
		These properties generally define file and directory names (or paths) that
		affect where the build process stores its outputs.
	-->

	<!-- <property name="app.version"	 value="1.0_beta_6"/> -->
	<property name="app.name"			value="myna_watchdog"/>
	<property name="app.path"			value="/${app.name}"/>
	<property name="build.home"		value="${basedir}/build"/>
	<property name="dist.home"		 value="${basedir}/dist"/>
	<!-- <property name="java5.home"		 value="${basedir}/jdk1.5.0_22/jre/lib/rt.jar:${basedir}/jdk1.5.0_22/jre/lib/jsse.jar"/> --> 
	<!-- <property name="java5.home"		 value="/usr/lib/jvm/java-6-openjdk/jre/lib/rt.jar"/> -->
	
	<property name="myna_server.home"		 value="${basedir}/myna_server"/>
	<property name="docs.home"		 value="${basedir}/web/shared/docs/myna_api/"/>
	<property name="src.home"			value="${basedir}/src"/>
	<property name="web.home"			value="${basedir}/web"/>
	<property name="jars.home"			value="${basedir}/jars"/>
	<!-- sets the "version" property -->
	<property prefix="current"	file="src/version.properties"/>
	
	

<!-- ==================== Compilation Control Options ====================== -->

	<!--
	
		These properties control option settings on the Javac compiler when it
		is invoked using the <javac> task.
	
		compile.debug				Should compilation include the debug option?
	
		compile.deprecation	Should compilation include the deprecation option?
	
		compile.optimize		 Should compilation include the optimize option?
	
	-->

	<property name="compile.debug"			 value="true"/>
	<property name="compile.deprecation" value="false"/>
	<property name="compile.optimize"		value="true"/>


<!-- ==================== Compilation Classpath ============================ -->

	<!--
	
		Rather than relying on the CLASSPATH environment variable, Ant includes
		features that makes it easy to dynamically construct the classpath you
		need for each compilation.	The example below constructs the compile
		classpath to include the servlet.jar file, as well as the other components
		that Tomcat makes available to web applications automatically, plus anything
		that you explicitly added.
	
	-->

	<path id="compile.classpath">
		<fileset dir="${jars.home}/">
			<include name="*.jar"/>
		</fileset>
	 <!--	<pathelement location="ojdbc14.jar"/> -->	
		<pathelement location="winstone/winstone.jar"/>
	</path>



<!-- ==================== All Target ======================================= -->

	<!--
	
		The "all" target is a shortcut for running the "clean" target followed
		by the "compile" target, to force a complete recompile.
	
	-->

	<target name="all" depends="clean,compile"
	 description="Clean build and dist directories, then compile"/>


<!-- ==================== Clean Target ===================================== -->

	<!--
	
		The "clean" target deletes any previous "build" and "dist" directory,
		so that you can be ensured the application can be built from scratch.
	
	-->

	<target name="clean"
	 description="Delete old build and dist directories">
		<delete dir="${build.home}"/>
		<delete dir="${dist.home}"/>
	 <delete dir="${myna_server.home}/myna"/>
	</target>



<!-- ==================== Compile Target =================================== -->

	<!--
	
		The "compile" target transforms source files (from your "src" directory)
		into object files in the appropriate location in the build directory.
		This example assumes that you will be including your classes in an
		unpacked directory hierarchy under "/WEB-INF/classes".
	
	-->

	<target name="compile" depends="prepare"
	description="Compile Java sources">
	
	<!-- Compile Java classes as necessary -->
		<mkdir		dir="${build.home}/WEB-INF/classes"/>
		
		<javac srcdir="${src.home}"
			target="1.6"
			source="1.6"
			bootclasspath="${java5.home}"	
			destdir="${build.home}/WEB-INF/classes"
			debug="${compile.debug}"
			deprecation="${compile.deprecation}"
			includeantruntime="false"
			optimize="${compile.optimize}">
			
			<!-- <compilerarg value="-Xlint"/> -->
			<classpath refid="compile.classpath"/>
		</javac>
	
	<!-- Copy application resources -->
		<copy	todir="${build.home}/WEB-INF/classes">
		 <fileset dir="${src.home}" excludes="**/*.java"/>
		</copy>

	</target>

<!-- ==================== jar Target ======================================= -->


	<target name="jar" depends="compile" description="create jar file">
		<jar destfile="${dist.home}/myna.jar">
			<fileset dir="${build.home}/WEB-INF/classes" includes="bootstrap/MynaServer.class"/>
			<restrict>
				<name regex="^(?!.*(SF|RSA|DSA)).*$" />
				<name regex="^(?!.*(about_files|about.html|plugin.properties)).*$" />
				<archives>
					<zips>	
						<fileset dir="${jars.home}" includes="commons-cli.jar" />
						<fileset dir="${jars.home}" includes="commons-io.jar" />
						<fileset dir="${jars.home}" includes="jetty-all.jar" excludes=" *about.html"/>
						<fileset dir="${jars.home}" includes="servlet-api-2.5.jar" excludes="*META-INF/* *about_files/* *about.html *plugin.properties"/>
						
					</zips>
				</archives>
			</restrict>
			<fileset dir="${build.home}" />
			<manifest>
				<attribute name="Main-Class"
				value="bootstrap.MynaServer"/>
			</manifest>
		</jar>
		<!-- <manifest file="MANIFEST.MF">
			<attribute name="Main-Class" value="info.emptybrain.myna.MynaServer"/>
		</manifest>
		<jar 
			jarfile="${dist.home}/myna.jar" 
			basedir="${build.home}"
			manifest="MANIFEST.MF"
		/> -->
	</target>	

<!-- ==================== set_version Target =============================== -->
	<!--
	
		The "dist" target creates a binary distribution of your application
		in a directory structure ready to be archived in a tar.gz or zip file.
		Note that this target depends on two others:
	
		* "compile" so that the entire web application (including external
		 dependencies) will have been assembled
	
		* "javadoc" so that the application Javadocs will have been created
	
	-->
	<target name="set_version" depends=""
	 	description="Sets the version number">

	 <input message="Please enter the build version number:" addproperty="build.version" defaultvalue="${current.version}"/>
	 <echo file="${build.home}.dev/WEB-INF/classes/version.properties">version=${build.version}</echo>
	 <echo file="${src.home}/version.properties">version=${build.version}</echo>
	 
	</target>
<!-- ==================== Dist Target ====================================== -->
	<target name="dist" depends="set_version,clean,compile,javadoc"
	 	description="Create binary distribution">
	
	 	<!-- Create application JAR file -->
		<mkdir dir="${dist.home}"/>
		<delete file="MANIFEST.MF"/>
		
		<jar destfile="${dist.home}/${app.name}-${build.version}.jar">
			<fileset dir="${build.home}/WEB-INF/classes" includes="bootstrap/*.class"/>
			<restrict>
				<name regex="^(?!.*(SF|RSA|DSA)).*$" />
				<name regex="^(?!.*(about_files|about.html|plugin.properties)).*$" />
				<archives>
					<zips>	
						<fileset dir="${jars.home}" includes="commons-cli.jar" />
						<fileset dir="${jars.home}" includes="commons-io.jar" />
						<!-- <fileset dir="${jars.home}" includes="jetty-all.jar" excludes=" *about.html"/>
						<fileset dir="${jars.home}" includes="servlet-api-2.5.jar" excludes="*META-INF/* *about_files/* *about.html *plugin.properties"/> -->
						
					</zips>
				</archives>
			</restrict>
			<fileset dir="${build.home}" />
			<manifest>
				<attribute name="Main-Class"
				value="bootstrap.MynaInstaller"/>
			</manifest>
		</jar>

		 <!-- copy build to myna_server -->
		<!-- <mkdir dir="${myna_server.home}/myna"/>
		<copy	todir="${myna_server.home}/myna">
			<fileset dir="${build.home}" />
			<file file="${basedir}/release_notes"/>
			<file file="${basedir}/changelog"/>
		</copy> -->
		
		<!-- make myna_server.zip zip -->
		<!-- <zip destfile="${dist.home}/myna_server_${build.version}.zip"
			basedir="${myna_server.home}"
			update="true"
		/> -->

	</target>




<!-- ==================== Javadoc Target =================================== -->

	<!--
	
		The "javadoc" target creates Javadoc API documentation for the Java
		classes included in your application.	Normally, this is only required
		when preparing a distribution release, but is available as a separate
		target in case the developer wants to create Javadocs independently.
	
	-->

	<target name="javadoc" depends="compile"
	 description="Create Javadoc API documentation">

		<javadoc sourcepath="${src.home}"
								destdir="${docs.home}"
					 packagenames="*">
			<classpath refid="compile.classpath"/>
		</javadoc>

	</target>


<!-- ==================== Prepare Target =================================== -->

	<!--
	
		The "prepare" target is used to create the "build" destination directory,
		and copy the static contents of your web application to it.	If you need
		to copy static files from external dependencies, you can customize the
		contents of this task.
	
		Normally, this task is executed indirectly when needed.
	
	-->

	<target name="prepare">

		<!-- Create build directories as needed -->
		<mkdir	dir="${build.home}"/>
		<mkdir	dir="${build.home}/WEB-INF"/>
		<mkdir	dir="${build.home}/WEB-INF/classes"/>
	
		<!-- Copy static content of this web application -->
		<copy todir="${build.home}">
			<fileset dir="${web.home}" excludes="**/*.marks **/~* **/*~"/>
		</copy>
		<!-- <copy todir="${build.home}/shared/js/ext_latest">
			<fileset dir="${basedir}/ext_latest"/>
		</copy> -->

		<!-- Copy external dependencies as required -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
		<mkdir	dir="${build.home}/WEB-INF/lib"/>
			
	<copy todir="${build.home}/WEB-INF/lib">
			<fileset dir="${jars.home}"/>
		</copy>

	
		<!-- Copy static files from external dependencies as needed -->
		<!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

	</target>


</project>
