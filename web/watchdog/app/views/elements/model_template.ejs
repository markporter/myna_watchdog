<%
	var associations=[];
	model.associations.forEach(function(association){
		association.forEach(function(def,alias){
			//type.forEach(function(def,alias){
				associations.appendUnique(alias)
			//})
			
		})
	})
%>
Ext.define('App.model.<%=modelName%>', {
	extend: 'Ext.data.Model',
	fields:$f=[
	<@loop array="model.fieldNames" element="name" index="i">
		<% var field= model.getField(name); %>
		{
			name:<%=JSON.stringify(field.name)%>,
			label:<%=JSON.stringify(model.getLabel(field.name))%>,
			jsType:<%=JSON.stringify(field.type)%>
			<@if field.defaultValue || field.defaultValue === 0.0>
			,defaultValue:<%=JSON.stringify(field.defaultValue)%>
			</@if>
			<@if field.type == "date">
			,convert:function(val){
				if (!(/\/Date\(\d+\)\//).test(val)) return val
				return new Date(parseInt(val.match(/Date\((\d+)\)/)[1]));
			}
			</@if>
		}<@if i < model.fieldNames.length-1>,</@if></@loop><@if associations.length >,
		<@loop array="associations" element="a" index="i">
		{
			name:<%=JSON.stringify(a)%>,
			jsType:"object"
		}<@if i < associations.length-1>,</@if>
	</@loop>

	</@if>
	], 
	associationNames:<%=JSON.stringify(associations)%>,
	statics:{
		fields:$f.toDataSet().toMap("name"),
	},
	idProperty:'<%=model.idField%>',
	getLabel:function (col){
		if (col in App.model.<%=modelName%>.fields){
		
			return App.model.<%=modelName%>.fields[col].label
		} else { 
			//console.log(App.model.<%=modelName%>.fields)
			return col
		}
	},
	proxy:{
		type:"direct",
		paramsAsHash:true,
		<@if controller>
		api:{
		<@if controller.save>
			create:$FP.<%=modelName%>.save,
			update:$FP.<%=modelName%>.save,
		</@if>
		<@if controller.get>	
			read:$FP.<%=modelName%>.get,
		</@if>
		<@if controller.remove>
			destroy:$FP.<%=modelName%>.remove,
		</@if>
			dummy:undefined
		},
		</@if>
		reader: {
			type: 'json',
			idProperty:'<%=model.idField%>'
		}
	}
	
	
});

Ext.define('App.store.<%=modelName%>', {
	extend: 'Ext.data.Store',
	alias: 'store.<%=modelName.toLowerCase()%>',
	requires: ['Ext.data.proxy.Direct'],
	
	constructor : function(config){
		config = Ext.apply({}, config);
		if (!config.proxy) {
			var proxy = {
				type: 'direct',
				directFn:$FP.<%=modelName%>.list,
				
				paramsAsHash:true,
				reader: {
					type: 'json',
					totalProperty:'totalRows',
					root:'data',
					idProperty:'<%=model.idField%>'
				}
			};
			
			config.proxy = proxy;
			config.model=App.model.<%=modelName%>;
			
		}
		this.callParent([config]);
	}	
});