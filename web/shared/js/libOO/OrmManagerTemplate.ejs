<%
	var db = new Myna.Database(dm.ds)
	var table = db.getTable(tableName);
	table.clearMetadataCache();
	var sqlTableName = table.sqlTableName;
	var qt = dm.qt;
	var columns = table.columns;
	var columnNames = table.columnNames;
	if (!table.exists){
		throw new Error("No table '" + tableName +"' found in data source '" + dm.ds +"' \nTables: " + this.db.tables.map(function(t){return t.table_name}).join());
	}
	
	if (table.primaryKeys.length != 1){
		throw new Error("DataManager can only handle tables with exactly one primary key");	
	}
	
	var primaryKey = table.primaryKeys[0];
	var pkey_datatype =columns[primaryKey].data_type;
	var sqlpkey = table.getSqlColumnName(primaryKey);
	var t = table
	var signature = Object({
			columns:t.columns,
			primaryKeyInfo:t.primaryKeyInfo,
			foreignKeyInfo:t.foreignKeyInfo,
			exportedKeys:t.exportedKeys
	}).toJson().hashCode()
%>

function <%=tableName%>_manager(){
	this.init();
}

<%=tableName%>_manager.signature='<%=signature%>';
<%=tableName%>_manager.prototype={
	qt:[ejs]<%=dm.qt%>[/ejs],
	name:"<%=tableName%>",
	modelName:"<%=dm.t2m(tableName)%>",
	tableName:[ejs]<%=table.tableName%>[/ejs],
	sqlTableName:[ejs]<%=table.sqlTableName%>[/ejs],
	_init:function _init(dm,options){
		if (!options) options ={}
		options.setDefaultProperties({
			softDeleteCol:"deleted",
			createdCol:"created",
			modifiedCol:"modified",
		})
		this.dm = dm;
		this._labels = {}
		
		this.db = dm.db;
		this.primaryKey=this.idField="<%=primaryKey%>";
		
		this.associations ={
			hasOne:{},
			hasMany:{},
			belongsTo:{},
			hasBridgeTo:{},
		}
		this.table = this.db.getTable(this.name);

		
		
		this._validators={}
		var $this = this;
		options.applyTo(this);
		
		this.validation = new Myna.Validation();
		Myna.DataManager.validatorFunctions.applyTo(this.validation.validatorFunctons,true);
		
		this.validation.getLabel = function(colname){
			return $this.getLabel(colname);
		}
		this.validation.genLabel = function(colname){
			return $this.genLabel(colname);
		}
		if (this.columnNames.indexOf(this.modifiedCol.toLowerCase()) == -1){
			this.modifiedCol = false;
		}
		if (this.columnNames.indexOf(this.softDeleteCol.toLowerCase()) == -1){
			this.softDeleteCol = false;
		}
		if (this.columnNames.indexOf(this.createdCol.toLowerCase()) == -1){
			this.createdCol = false;
		}
		<%  	
		/* build implicit associations from foreign keys */
			/* exported keys*/
				table.exportedKeys.forEach(function(localExport){
					var alias, fk_name_part,name
					/* make sure getManager will work */
						var relatedTable = db.getTable(localExport.fktable_name)
						if (relatedTable.primaryKeys.length == 1){
							/* now check for bridge only table; where every column is either a primary key or foreign key */
								var bridgeOnly =relatedTable.columnNames.every(function(colname){
									if (colname.toLowerCase() == relatedTable.primaryKeys[0].toLowerCase()){
										return true	
									}
									return relatedTable.foreignKeys.contains(function(fk){
										return fk.fkcolumn_name.toLowerCase() == colname.toLowerCase()
									})
								})
							
							//Myna.printConsole("hasOne, from " + manager.table.tableName + " to " + relatedTable.tableName );
							if (!bridgeOnly){
								/* hasOne */
									name = localExport.fktable_name.toLowerCase();
									alias = dm.t2m(localExport.fktable_name);
									fk_name_part = localExport.fkcolumn_name.toLowerCase()
									if ( //check for aliased FK
										fk_name_part.listBefore("_") != localExport.pktable_name.toLowerCase()
										&& dm.fk2t(fk_name_part) != localExport.pktable_name.toLowerCase()
									) {
										alias=dm.t2m(dm.fk2t(fk_name_part))
									}
									Myna.print(
										"\nthis.hasOne("
										+JSON.stringify({
											name:localExport.fktable_name.toLowerCase(),
											alias:dm.t2m(localExport.fktable_name),
											localKey:localExport.pkcolumn_name.toLowerCase(),
											foreignKey:localExport.fkcolumn_name.toLowerCase(),
										},null,"  ")
										+ ");"
									)
									
									
								/* hasMany */
									name = localExport.fktable_name.toLowerCase()
									alias = dm.m2pm(dm.t2m(localExport.fktable_name))
									if ( //check for aliased FK
										fk_name_part.listBefore("_") != localExport.pktable_name.toLowerCase()
										&& dm.fk2t(fk_name_part) != localExport.pktable_name.toLowerCase()
									) {
										alias=dm.m2pm(dm.t2m(dm.fk2t(fk_name_part)))
									}
									Myna.print(
										"\nthis.hasMany("
										+JSON.stringify({
											name:name,
											alias:alias,
											localKey:localExport.pkcolumn_name.toLowerCase(),
											foreignKey:localExport.fkcolumn_name.toLowerCase(),
										},null,"  ")
										+ ");"
										
									)
							}
						} else{
							//Myna.log("debug","skipping " + relatedTable.tableName,Myna.dump($req.data));
						}
					
					/* add Bridges */
					relatedTable.foreignKeys.filter(function(relatedExport){
						return relatedExport.pktable_name != table.tableName
					}).forEach(function(relatedExport){
						//Myna.printConsole("bridgeTo, from " + table.tableName + " to " + relatedTable.tableName );
						Myna.print(
							"\nthis.hasBridgeTo("
							+JSON.stringify({
								name:dm.m2pm(dm.t2m(relatedExport.pktable_name)),
								bridgeTable:relatedTable.tableName.toLowerCase(),
								
								localBridgeKey:localExport.fkcolumn_name.toLowerCase(),
								
								foreignBridgeKey:relatedExport.fkcolumn_name.toLowerCase(),
								foreignKey:relatedExport.pkcolumn_name.toLowerCase(),
							},null,"  ")
							+ ");" 
						)
					})
				})
			/* foreign keys  */
				table.foreignKeys.forEach(function(row){
					name = row.pktable_name.toLowerCase();
					var alias = dm.t2m(row.pktable_name);
					var fk_name_part = row.fkcolumn_name.toLowerCase();
					if ( //check for aliased FK
						fk_name_part.listBefore("_") != row.fktable_name.toLowerCase()
						&& dm.fk2t(fk_name_part) != row.fktable_name.toLowerCase()
					) {
						alias=dm.t2m(dm.fk2t(fk_name_part))
					}
					Myna.print(
						"\nthis.belongsTo("
						+JSON.stringify({
							name:name,
							alias:alias,
							localKey:row.fkcolumn_name.toLowerCase(),
							foreignKey:row.pkcolumn_name.toLowerCase(),
						},null,"  ")
						+");"
					)
				})
		%>
		/* build validators */
		<% 
		columnNames.forEach(function(colname){
			var colDef = columns[colname];
			if (
				colDef.is_nullable == "NO" 
				&& !colDef.column_def  
				&& colname != primaryKey
			){
			%>
			this.addValidator("<%=colname%>","required",{});<%
			}
			
			if (!/date|time/i.test(colDef.type_name)){
				if ("BLOB,CLOB".listContains(colDef.type_name)){
				%>
			this.addValidator("<%=colname%>","length",{max:2*1024*1024*1024*1024/*2 GB*/});<%
				} else {
				%>
			this.addValidator("<%=colname%>","length",{max:<%=colDef.column_size%>});<%
				}
			}
			%>
			this.addValidator("<%=colname%>","type",{type:"<%=Myna.Database.dbTypeToJs(colDef.data_type)%>"})
			<%
			
		})
		%>
		this.init();
		return this;
	},
	init:function init(){},
	ds:"<%=dm.ds%>",
	
	forceDelete:function forceDelete(id){
		this.beforeRemove(id)
		var manager = this;
		var p = new Myna.QueryParams();
		
		var qry = new Myna.Query({
			dataSource:this.ds,
			log:this.logQueries,
			sql:[ejs]
				delete from <%=sqlTableName%>
				where <%=sqlpkey%> = {id:<%=pkey_datatype%>}
			[/ejs],
			values:{
				id:id
			}
		});
		this.afterRemove(id);
	},
	create:function create(requiredFields){
		var manager = this;
		if (!requiredFields) requiredFields={}
		if (!requiredFields.<%=primaryKey%>){
			requiredFields.<%=primaryKey%> = this.genKey();
		}
		
		requiredFields.checkRequired(
			<%=columnNames.filter(function(colName){
			return (columns[colName].is_nullable == "NO" 
				&& !columns[colName].column_def
				&& colName != primaryKey);
			
			}).toJson()%>	
		)
			
		//update if exists instead of creating
			var exists =this.findBeans(requiredFields.<%=primaryKey%>);
			if (exists.length) {
				var validation =exists[0].setFields(requiredFields);
				if (!validation.success) {
					Myna.logSync("error","Error in ManagerObject.create()",Myna.dump(validation));
					throw new Error("Error in ManagerObject.create() See Administrator log for details")
				}
				return exists[0];
			}
		this.beforeCreate(requiredFields)
		var now = new Date()
		if (this.createdCol && !requiredFields[this.createdCol]) {
			requiredFields[this.createdCol] = now;
		}
		if (this.modifiedCol && !requiredFields[this.modifiedCol]) {
			requiredFields[this.modifiedCol] = now;
		}

		var columnArray = requiredFields.getKeys()
		.filter(function(colName){
			//ignore columns that don't exist
			return colName in manager.table.columns
		})
		.filter(function(colName){
			//ignore columns that are not massAssignable and not required
			return manager.getMassAssignable().contains(colName)
				|| requiredFields.getKeys().contains(colName);
		}); 
		//Myna.printConsole(Myna.dumpText(columnArray));
		var fieldArray = columnArray.map(function(colName){
			return  manager.qt + manager.columns[colName].column_name + manager.qt;
		});
		
		
		var p = new Myna.QueryParams();
		var qry = new Myna.Query({
			dataSource:this.ds,
			log:this.logQueries,
			parameters:p,
			sql:[ejs]
				insert into <%=sqlTableName%> (<|=fieldArray.join()|>) 
				values (
				<| 
					columnArray.forEach(function(colName,index){
						var value = requiredFields[colName];
						var type = manager.columns[colName].data_type;
						var isNull = (value === null);
						Myna.print(p.addValue(value,type,isNull))
						if (index < columnArray.length -1) Myna.print(",")
					});
					
				|>
				)
				
			[/ejs]
		});
		<@if columns[primaryKey].col_def ==null || columns[primaryKey].column_def.length !=0>
		if (!requiredFields.<%=primaryKey%>){
			requiredFields.<%=primaryKey%> = qry.generatedKey
		}
		</@if>
		var bean = this.getById(requiredFields.<%=primaryKey%>);
		this.afterCreate(bean);
		return bean;
	},
	query:function query(pattern,options){
		if (!pattern) pattern={}
		var $this = this;
		var criteria=[];
		var pkey ="<%=columns[primaryKey].column_name%>";
		var colNameSql;
		var op;
		var caseSensitive=false
		var where = false;
		var select ="*"
		var orderBy=false;
		
		if (typeof options == "object"){
			caseSensitive= options.caseSensitive;
		} else {
			caseSensitive = options
			options={}
		}
		var getCriteria=function(colName,pattern){
			colName= colName.toLowerCase();
			var op=" = ";
			if (colName.listLen(" ") > 1){
				op = " " +colName.listAfter(" ") + " ";
				colName = colName.listFirst(" ");
			}
			var type=$this.columns[colName].data_type;
			var col = {
				column:colName,
				op:op,
				isNull:false,
				type:type,
				pattern:pattern
			}
			
			
			
			
			if (/%/.test(String(pattern))){
				col.op =" like ";
			}
			
			col.compareColumn =col.column
			if (pattern === null){
				col.compareColumn =$this.getSqlColumnName(col.column)
				col.isNull = true;
				if (op == " = ") col.op ="is"
			} else if (Myna.Database.dbTypeToJs($this.columns[colName].data_type) == "string"){
				if (!caseSensitive){
					col.pattern = String(col.pattern).toLowerCase();
					col.column = colName.toLowerCase();
					col.compareColumn ="LOWER(" + $this.getSqlColumnName(col.column) +")"	
				} else {
					col.compareColumn =$this.getSqlColumnName(col.column)
				}
			} else {
				col.compareColumn =$this.getSqlColumnName(col.column)
			}
			
			return col
		}
		
		if (typeof pattern == "object" && !(pattern instanceof Date)){
			if ("select" in pattern) select = pattern.select
			if ("orderBy" in pattern) orderBy = pattern.orderBy
			if ("where" in pattern){
				where = pattern.where
			} else {
				var myColumnList = this.columnNames.join()
				if (!options.includeSoftDeleted){
					pattern[this.softDeleteCol] = null	
				}
				pattern.getKeys().filter(function(colName){
					return myColumnList.listContains(colName.toLowerCase()) || colName.toLowerCase().listLen(" ") >1
				}).forEach(function(colName){
					
					criteria.push(getCriteria(colName,pattern[colName]||null))
				})
			}
			
		} else{
			criteria.push(getCriteria("<%=dm.db.isCaseSensitive?primaryKey:primaryKey.toLowerCase()%>",pattern));
		}
		
		if (where){
			
			var qry = new Myna.Query(options.applyTo({
				dataSource:this.ds,
				log:$this.logQueries,
				sql:[ejs]
					select <|=select|>
					from <%=sqlTableName%>
					where 
					<#if !options.includeSoftDeleted && $this.softDeleteCol in $this.columnNames>
						<|=$this.getSqlColumnName($this.softDeleteCol)|> is null and
					</#if>
					<|=where|>
					<#if orderBy>
						order by <|=orderBy|>
					</#if>
				[/ejs],
				values:pattern
			}))
			
		} else {
			var p = new Myna.QueryParams();
			
			qry = new Myna.Query(options.applyTo({
				dataSource:this.ds,
				log:$this.logQueries,
				parameters:p,
				sql:[ejs]
					select <|=select|>
					from <%=sqlTableName%>
					where 
					<#if !options.includeSoftDeleted && $this.softDeleteCol in $this.columnNames>
						<|=$this.getSqlColumnName($this.softDeleteCol)|> is null and
					</#if>
					1=1
					<#loop array="criteria" element="col" >
						<#if col.isNull>
						and <|=col.compareColumn|> <|=col.op|> null
						<#else>
						and <|=col.compareColumn|> <|=col.op|> <|=p.addValue(col.pattern,col.type,!!col.pattern)|>
						</#if>
					</#loop>
					<#if orderBy>
						order by <|=orderBy|>
					</#if>
				[/ejs]
			}))
			
		}
		qry.data.totalRows = qry.totalRows
		return qry.data
	},
	find:function find(pattern,options){
		var $this = this
		var sqlKey = '<%=table.getSqlColumnName(primaryKey)%>'
		if (!pattern) pattern={}
		if (typeof pattern == "object" && !(pattern instanceof Date)){
			pattern.setDefaultProperties({select:sqlKey})
		} else {
			var id = pattern;
			pattern ={
				select:sqlKey
			}
			pattern.<%=primaryKey%> = id
		}
		return this.queryCol("<%=primaryKey.toLowerCase()%>",pattern,options)
		
	},
	findBeans:function findBeans(pattern,options){
		var $this = this;
		pattern=pattern||{}
		if (options === !!options) {
			options={
				caseSensitive:!!options
			}	
		}
		
		try {
			if ( pattern && typeof pattern == "object" &&  !("select" in pattern)){
				pattern.select ="*"
			}
		}catch(e){
			Myna.printConsole("DataManager.findBeans: bad pattern " + String(pattern) + " == "+ (typeof pattern))
		}
			
		var qry = this.query(pattern,options);
		var result = new Myna.DataSet({
			columns:$this.columnNames,
			data:qry.map(function(row){
					$this.beforeLoad(row)
					var bean = new $this.beanClass(row,$this)
					$this.afterLoad(bean)
					bean.deferred = $this.deferred;
					bean.exists=true;
					return bean
				})
		})
		result.totalRows = qry.totalRows
		return result
	},
	getSqlColumnName:function getSqlColumnName(colname){
		if (!colname || !(colname.toLowerCase() in this.columns)){
			throw new Error(
				"getSqlColumnName: Column '" + colname + "' does not exist in the '" + this.tableName + "' table."
			)	
		}
		return this.columns[colname.toLowerCase()].column_name.listQualify(this.qt);
	},
	genKey:function genKey(){
		<% 
			var pktype =Myna.Database.dbTypeToJs(pkey_datatype);
		%>
		
		<@if pktype == "string">
			return Myna.createUuid();
		<@elseif pktype == "numeric">
			var maxId =new Myna.Query({
				dataSource:this.ds,
				sql:'select max(<%=sqlpkey%>) as id from <%=sqlTableName%>' 
			}).data[0].id;
			if (!maxId) {
				return 1;
			} else {
				return maxId +1;
			}
		<@else>
			throw new Error("genKey must be overloaded for primary keys of type" + pktype )
		</@if>
	},
	getById:function getById(id){
		var manager = this;
		var bean={};
		var p = new Myna.QueryParams();
		var qry = new Myna.Query({
			dataSource:this.ds,
			log:this.logQueries,
			sql:[ejs]
				select
				<@loop array="columnNames" element="name" index="i">
					<%=table.getSqlColumnName(name)%> <@if i < columnNames.length - 1 >,</@if> </@loop>
					
				from <%=sqlTableName%>
				where <%=sqlpkey%> ={id:<%=pkey_datatype%>}
			[/ejs],
			values:{
				id:id
			}
		});
		if (!qry.data.length) {
			throw new Error("Unable to find '" + this.sqlTableName + "' by id '" + id +"'.");
		}
			
		this.beforeLoad(qry.data[0])
		bean = new this.beanClass(qry.data[0],this)
		this.afterLoad(bean)
		                                                                       
		bean.deferred = this.deferred;
		bean.exists=true;
		
		
		
		
		return bean;
	},
	
}

<%=tableName%>_manager.beanClass=function(data,manager){
	var $this = this;
	//this.manager = manager
	this.data = data;
	this.id=data.<%=primaryKey%>;
	this.data.getKeys().forEach(function(prop){
		if (!(prop in $this)){
			Object.defineProperty(
				$this, 
				prop, 
				{
					get:$this["get_" + prop],  
					enumerable: true,  
					configurable: true
				}
			); 
		}
	})    
	
	Object.defineProperty(
		$this, 
		"data", 
		{
			value:data,
			writeable:true,
			enumerable: false,  
			configurable: false
		}
	);
	$this.exists = false;
	/* Object.defineProperty(
		$this, 
		"exists", 
		{
			value:false,
			writeable:true,
			enumerable: false,  
			configurable: false
		}
	); */
	/* Object.defineProperty(
		$this, 
		"isDirty", 
		{
			value:false,
			writeable:true,
			enumerable: false,  
			configurable: false
		}
	); */
	$this.isDirty= false;
	$this.deferred = false;
	/* Object.defineProperty(
		$this, 
		"deferred", 
		{
			value:false,
			writeable:true,
			enumerable: true,  
			configurable: true
		}
	); */
	Object.defineProperty(
		$this, 
		"manager", 
		{
			value:manager,
			writeable:false,
			enumerable: false,  
			configurable: false
		}
	);
	Object.defineProperty(
		$this, 
		"model", 
		{
			value:manager,
			writeable:false,
			enumerable: false,  
			configurable: false
		}
	);
	Object.defineProperty(
		$this, 
		"dm", 
		{
			value:manager.dm,
			writeable:false,
			enumerable: false,  
			configurable: false
		}
	);
	Object.defineProperty(
		$this, 
		"_loadedAliases", 
		{
			value:{},
			writeable:false,
			enumerable: false,  
			configurable: false
		}
	);
	
	//$this.setDefaultProperties(manager)
	[
		"associations",
		"columns",
		"columnNames",
		"ds",
		"dm",
		"db"
		
	].forEach(function(prop){
		Object.defineProperty(
			$this, 
			prop, 
			{
				value:manager[prop],  
				enumerable: false,  
				configurable: false
			}
		);
		
	})
	
	//build associations
	manager.associations.forEach(function(models,type){
		if (type=="belongsTo") type="hasOne";
		//if(type == "hasOne" || type == "hasMany")
		models.forEach(function(options,alias){
			$this[alias] = function(conditions,queryOptions){
				if (!options){
					Myna.abort("fail")	
				}
				if (conditions){
					if (options.conditions){
						conditions.forEach(function(option,prop){
							if (prop=="where"){
								options.conditions.where += " and " + conditions.where +" ";
							}else{
								options.conditions[prop] = conditions[prop];
							}
						})
					} else {
						options.conditions = conditions;
					}
				}
				var relatedBean = Myna.DataManager.getRelated($this,alias,type,options.toJson().parseJson(),queryOptions);
				this[alias] =function(){return relatedBean}
				return this[alias]()
			}
		})
	})
	
}
//Save a reference on each manager instance
<%=tableName%>_manager.prototype.beanClass=<%=tableName%>_manager.beanClass;

<%=tableName%>_manager.beanClass.prototype = {
	init:function init(){},
	//isDirty:false,
	setFields:function setFields(fields){
		var $this = this;
		var startData={}

		var bean = this;
		var manager = this.manager;
		//ignore non-field values
		fields= fields.applyTo({})
		if (manager.modifiedCol && !fields[manager.modifiedCol]) {
			fields[manager.modifiedCol] = new Date();
		}
		fields.getKeys().forEach(function(k){
			//filter non column properties
			if (!manager.getMassAssignable().contains(k) || (k == "<%=primaryKey%>" && !bean.deferred)){
				delete fields[k]	
			}
		})
		
		fields.map(function(v,k){
			var newval = $this.manager.beforeSetField(
				this,
				k,
				v,
				startData[k]=$this.data[k]
			)
			if (newval !== undefined) v= newval
			return v
		})
		fields.applyTo(this.data,true);
		var result = this.validate();
		

		if (this.deferred) {
			this.isDirty = true;
			fields.map(function(v,k){
				$this.manager.afterSetField(
					this,
					k,
					v,
					startData[k]
				)
			})
			//return even if successful when deferred
			return result;
		} else if (!result.success){//if validation failed
			Myna.log("validation","Validation errors for table <%=tableName%>" ,Myna.dump(result));
			return result
		}
		
		fields.map(function(v,k){
			var newval = $this.manager.beforeSaveField(
				this,
				k,
				v,
				startData[k]=$this.data[k]
			)
			if (newval !== undefined) v= newval;
			return v;
		})

		//only get here if not deferred and validation was successful
		
		try {
			var p =new Myna.QueryParams();
			var fieldArray = fields.getKeys().filter(function(f){
				return f in manager.columns
			});
			var qry = new Myna.Query({
				dataSource:this.manager.ds,
				log:this.manager.logQueries,
				parameters:p,
				sql:[ejs]
					UPDATE <%=sqlTableName%>
					SET
						<#loop array="fieldArray" element="fieldName" index="i">
							<| 
								var value = fields[fieldName];
								var type = manager.columns[fieldName.toLowerCase()].data_type;
								var isNull = (value === null);
								var columnName=manager.columns[fieldName.toLowerCase()].column_name;
							|>
							<|=manager.getSqlColumnName(columnName)|> = <|=p.addValue(value,type,isNull)|>
							
							<#if i != fieldArray.length-1 >,</#if>
						</#loop>
						
						
					WHERE
						<%=sqlpkey%> = <|=p.addValue(bean.id,<%=pkey_datatype%>)|>
				[/ejs]
			});
			//bean.data[fieldName] = newval;
			
		} catch (e){
			Myna.log("error",e.message,Myna.formatError(e));
			result.addError("Error saving record, see Administrator log for details");
		}

		fields.map(function(v,k){
			$this.manager.afterSaveField(
				this,
				k,
				v,
				startData[k]
			)
		})
		return result;
	},
	saveField:function saveField(fieldName,newval){
		var fields={}
		fields[fieldName] = newval;
		return this.setFields(fields)

	
	},
	/* Getters and setters */
	<@loop array="columnNames" element="colname" index="i">
		/* Field: <%=colname%> */
			get_<%=colname%>:function(){
				return this.data.<%=colname%>;
			},
			<@if colname != primaryKey>
			set_<%=colname%>:function(newval){
				var result = new Myna.ValidationResult();
				if (typeof newval === "undefined"){
					result.addError("argument 'value' required for set_<%=colname%>.","<%=colname%>");
					return result;
				}
				return this.saveField("<%=colname%>",newval);
			}, </@if> </@loop>
}
new Myna.DataManager.beanBaseClass().applyTo(<%=tableName%>_manager.beanClass.prototype);

<%=tableName%>_manager.prototype.columnNames=
<%=tableName%>_manager.prototype.fieldNames=<%=JSON.stringify(columnNames,null,"   ")%>
<%=tableName%>_manager.prototype.columns=<%=JSON.stringify(columns,null,"   ")%>
<%=tableName%>_manager.prototype._types=<%=JSON.stringify(
	columns.map(function(def,colname){
		return Myna.Database.dbTypeToJs(def.data_type)
	})
,null,"   ")%>



new Myna.DataManager.managerBaseClass().applyTo(<%=tableName%>_manager.prototype)